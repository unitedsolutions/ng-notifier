{"version":3,"sources":["../../tmp/services/notifier.service.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAA,MAAa,QAAA,CAAS;AAClC,OAAO,EAAA,UAAE,EAAU,MAAM,eAAA,CAAgB;AACzC,OAAO,EAAA,OAAE,EAAO,MAAS,MAAA,CAAO;AAGhC;IAAA;IA6CA,CAAC;IA1CC,iCAAc,GAAd,UAAe,MAAM;QACd,IAAA,oCAAY,CAAa;QAE9B,EAAE,CAAA,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,CAAC;QACjD,CAAC;QAED,IAAI,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;QAC5B,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAClC,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;IAChC,CAAC;IAED,mCAAgB,GAAhB,UAAiB,MAAM;QACrB,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;IAED,uBAAI,GAAJ,UAAK,MAAM,EAAE,IAAI;QACV,IAAA,sBAAO,EAAE,sBAAO,CAAS;QAE9B,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACvB,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC;YACpB,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,EAAC,OAAO,SAAA,EAAC,CAAC,CAAC;QAC5B,CAAC;QAED,EAAE,CAAA,CAAC,OAAO,CAAC,CAAC,CAAC;YACX,GAAG,CAAA,CAAe,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;gBAArB,IAAI,MAAM,gBAAA;gBACP,IAAA,0BAAQ,EAAE,wBAAO,CAAW;gBACjC,EAAE,CAAA,CAAC,OAAO,CAAC,CAAC,CAAC;oBACX,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,EAAC,OAAO,EAAE,QAAQ,EAAC,CAAC,CAAC;oBACpC,KAAK,CAAC;gBACR,CAAC;aACF;QACH,CAAC;QAED,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IArCM,qBAAY,GAAG,IAAI,GAAG,EAAE,CAAC;IAsC3B,mBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,uBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,eAAC;CA7CD,AA6CC,IAAA;SA7CY,QAAQ","file":"notifier.service.js","sourceRoot":"","sourcesContent":["import * as _       from 'lodash';\nimport {Injectable} from '@angular/core';\nimport {Subject}    from 'rxjs';\n\n\nexport class Notifier {\n  static broadcasters = new Map();\n  \n  registerHandle(handle) {\n    let {broadcasters} = Notifier;\n    \n    if(broadcasters.has(handle)) {\n      return broadcasters.get(handle).asObservable();\n    }\n    \n    let subject = new Subject();\n    broadcasters.set(handle, subject);\n    return subject.asObservable();\n  }\n  \n  deregisterHandle(handle) {\n    Notifier.broadcasters.delete(handle);\n  }\n  \n  send(handle, data) {\n    let {message, actions} = data;\n    \n    if(!_.isArray(message)) {\n      message = [message];\n      _.extend(data, {message});\n    }\n    \n    if(actions) {\n      for(let action of actions) {\n        let {callback, onClose} = action;\n        if(onClose) {\n          _.extend(data, {onClose: callback});\n          break;\n        }\n      }\n    }\n    \n    Notifier.broadcasters.get(handle).next(data);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}