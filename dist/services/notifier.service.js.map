{"version":3,"file":"notifier.service.js","sourceRoot":"","sources":["../../tmp/services/notifier.service.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,KAAK,CAAC,MAAY,QAAQ,CAAC;AAClC,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AACzC,OAAO,EAAC,OAAO,EAAC,MAAS,MAAM,CAAC;AAGhC;IAAA;IAuCA,CAAC;iBAvCY,QAAQ;IAGnB,iCAAc,GAAd,UAAe,MAAM;QACd,IAAA,sCAAY,CAAa;QAE9B,IAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAC3B,OAAO,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,CAAC;SAChD;QAED,IAAI,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;QAC5B,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAClC,OAAO,OAAO,CAAC,YAAY,EAAE,CAAC;IAChC,CAAC;IAED,mCAAgB,GAAhB,UAAiB,MAAM;QACrB,UAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;IAED,uBAAI,GAAJ,UAAK,MAAM,EAAE,IAAI;QACV,IAAA,sBAAO,EAAE,sBAAO,CAAS;QAE9B,IAAG,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACtB,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC;YACpB,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,EAAC,OAAO,SAAA,EAAC,CAAC,CAAC;SAC3B;QAED,IAAG,OAAO,EAAE;YACV,KAAkB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO,EAAE;gBAAvB,IAAI,MAAM,gBAAA;gBACP,IAAA,0BAAQ,EAAE,wBAAO,CAAW;gBACjC,IAAG,OAAO,EAAE;oBACV,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,EAAC,OAAO,EAAE,QAAQ,EAAC,CAAC,CAAC;oBACpC,MAAM;iBACP;aACF;SACF;QAED,UAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;;IArCM,qBAAY,GAAG,IAAI,GAAG,EAAE,CAAC;IADrB,QAAQ;QADpB,UAAU,EAAE;OACA,QAAQ,CAuCpB;IAAD,eAAC;CAAA,AAvCD,IAuCC;SAvCY,QAAQ","sourcesContent":["import * as _       from 'lodash';\nimport {Injectable} from '@angular/core';\nimport {Subject}    from 'rxjs';\n\n@Injectable()\nexport class Notifier {\n  static broadcasters = new Map();\n  \n  registerHandle(handle) {\n    let {broadcasters} = Notifier;\n    \n    if(broadcasters.has(handle)) {\n      return broadcasters.get(handle).asObservable();\n    }\n    \n    let subject = new Subject();\n    broadcasters.set(handle, subject);\n    return subject.asObservable();\n  }\n  \n  deregisterHandle(handle) {\n    Notifier.broadcasters.delete(handle);\n  }\n  \n  send(handle, data) {\n    let {message, actions} = data;\n    \n    if(!_.isArray(message)) {\n      message = [message];\n      _.extend(data, {message});\n    }\n    \n    if(actions) {\n      for(let action of actions) {\n        let {callback, onClose} = action;\n        if(onClose) {\n          _.extend(data, {onClose: callback});\n          break;\n        }\n      }\n    }\n    \n    Notifier.broadcasters.get(handle).next(data);\n  }\n}\n"]}